# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе
# должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять
# увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n*****.


class Cell:
    def __init__(self, size):
        self.size = size

    def __str__(self):
        return f"{self.size}"

    def __add__(self, other):
        return Cell(self.size + other.size)

    def __sub__(self, other):
        return Cell(self.size - other.size) if (self.size - other.size) > 0 else f"Операция вычитания не может быть " \
                                                                                 f"выполнена из-за малого размера " \
                                                                                 f"первой клетки."

    def __mul__(self, other):
        return Cell(self.size * other.size)

    def __truediv__(self, other):
        return Cell(self.size // other.size)

    def make_order(self, num):
        # генерим список и заполняем либо звездочкой либо звездочкой вместе с символом переноса строки
        my_list = [chr(42) + chr(10) if el % num == 0 else "*" for el in range(1, self.size + 1)]
        # объединяем список в строку для вывода
        result = "".join(my_list)
        return f"{result}"


first_cell = Cell(11)
second_cell = Cell(4)

print(f"Сложение: {first_cell + second_cell}")
print(f"Вычитание: {first_cell - second_cell}")
print(f"Умножение: {first_cell * second_cell}")
print(f"Деление:  {first_cell / second_cell}")

print(f"Вывод ячеек по рядам:\n{first_cell.make_order(3)}")
